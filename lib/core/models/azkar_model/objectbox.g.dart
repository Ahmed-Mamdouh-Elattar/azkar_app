// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../../core/models/azkar_model/azkar_model.dart';
import '../../../core/models/azkar_model/zeker_item.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3215538926283714478),
    name: 'AzkarModel',
    lastPropertyId: const obx_int.IdUid(4, 6079713178193630857),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8953986239455389081),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4671472136145806724),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 381191926059898297),
        name: 'totalItems',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6079713178193630857),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'zekerItems',
        srcEntity: 'ZekerItem',
        srcField: '',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8184766316399817486),
    name: 'ZekerItem',
    lastPropertyId: const obx_int.IdUid(7, 7564363310133324530),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1016344080835290070),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2942210231328135556),
        name: 'zekr',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2483858515993152197),
        name: 'repeat',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4464482968116539201),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3554887493667881668),
        name: 'azkarModelId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 8114929475802047649),
        relationTarget: 'AzkarModel',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3970445304492665490),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7564363310133324530),
        name: 'isFavorite',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 8184766316399817486),
    lastIndexId: const obx_int.IdUid(1, 8114929475802047649),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AzkarModel: obx_int.EntityDefinition<AzkarModel>(
      model: _entities[0],
      toOneRelations: (AzkarModel object) => [],
      toManyRelations: (AzkarModel object) => {
        obx_int.RelInfo<ZekerItem>.toOneBacklink(
          5,
          object.id,
          (ZekerItem srcObject) => srcObject.azkarModel,
        ): object.zekerItems,
      },
      getId: (AzkarModel object) => object.id,
      setId: (AzkarModel object, int id) {
        object.id = id;
      },
      objectToFB: (AzkarModel object, fb.Builder fbb) {
        final categoryOffset = fbb.writeString(object.category);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, categoryOffset);
        fbb.addInt64(2, object.totalItems);
        fbb.addBool(3, object.isCompleted);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final categoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final totalItemsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final isCompletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final object = AzkarModel(
          category: categoryParam,
          totalItems: totalItemsParam,
          isCompleted: isCompletedParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<AzkarModel>(
          object.zekerItems,
          store,
          obx_int.RelInfo<ZekerItem>.toOneBacklink(
            5,
            object.id,
            (ZekerItem srcObject) => srcObject.azkarModel,
          ),
        );
        return object;
      },
    ),
    ZekerItem: obx_int.EntityDefinition<ZekerItem>(
      model: _entities[1],
      toOneRelations: (ZekerItem object) => [object.azkarModel],
      toManyRelations: (ZekerItem object) => {},
      getId: (ZekerItem object) => object.id,
      setId: (ZekerItem object, int id) {
        object.id = id;
      },
      objectToFB: (ZekerItem object, fb.Builder fbb) {
        final zekrOffset = fbb.writeString(object.zekr);
        final descriptionOffset = fbb.writeString(object.description);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, zekrOffset);
        fbb.addInt64(2, object.repeat);
        fbb.addOffset(3, descriptionOffset);
        fbb.addInt64(4, object.azkarModel.targetId);
        fbb.addBool(5, object.isCompleted);
        fbb.addBool(6, object.isFavorite);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final zekrParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final repeatParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final isCompletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final isFavoriteParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final object = ZekerItem(
          zekr: zekrParam,
          repeat: repeatParam,
          description: descriptionParam,
          isCompleted: isCompletedParam,
          isFavorite: isFavoriteParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.azkarModel.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.azkarModel.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AzkarModel] entity fields to define ObjectBox queries.
class AzkarModel_ {
  /// See [AzkarModel.id].
  static final id = obx.QueryIntegerProperty<AzkarModel>(
    _entities[0].properties[0],
  );

  /// See [AzkarModel.category].
  static final category = obx.QueryStringProperty<AzkarModel>(
    _entities[0].properties[1],
  );

  /// See [AzkarModel.totalItems].
  static final totalItems = obx.QueryIntegerProperty<AzkarModel>(
    _entities[0].properties[2],
  );

  /// See [AzkarModel.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<AzkarModel>(
    _entities[0].properties[3],
  );

  /// see [AzkarModel.zekerItems]
  static final zekerItems = obx.QueryBacklinkToMany<ZekerItem, AzkarModel>(
    ZekerItem_.azkarModel,
  );
}

/// [ZekerItem] entity fields to define ObjectBox queries.
class ZekerItem_ {
  /// See [ZekerItem.id].
  static final id = obx.QueryIntegerProperty<ZekerItem>(
    _entities[1].properties[0],
  );

  /// See [ZekerItem.zekr].
  static final zekr = obx.QueryStringProperty<ZekerItem>(
    _entities[1].properties[1],
  );

  /// See [ZekerItem.repeat].
  static final repeat = obx.QueryIntegerProperty<ZekerItem>(
    _entities[1].properties[2],
  );

  /// See [ZekerItem.description].
  static final description = obx.QueryStringProperty<ZekerItem>(
    _entities[1].properties[3],
  );

  /// See [ZekerItem.azkarModel].
  static final azkarModel = obx.QueryRelationToOne<ZekerItem, AzkarModel>(
    _entities[1].properties[4],
  );

  /// See [ZekerItem.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<ZekerItem>(
    _entities[1].properties[5],
  );

  /// See [ZekerItem.isFavorite].
  static final isFavorite = obx.QueryBooleanProperty<ZekerItem>(
    _entities[1].properties[6],
  );
}
